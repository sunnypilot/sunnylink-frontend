/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/backup/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Latest Device Backup
         * @deprecated
         * @description Retrieves the latest backup configuration for a specific device.
         */
        get: operations["GetDeviceBackup"];
        /**
         * Update Device Backup
         * @description Creates or updates a backup configuration for a device. If the backup does not exist, it's created; otherwise, it's updated.
         */
        put: operations["UpdateDeviceBackup"];
        post?: never;
        /**
         * Delete Device Backups
         * @description Deletes all backup configurations for a specific device.
         */
        delete: operations["DeleteDeviceBackup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backup/{deviceId}/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specific Version Device Backup
         * @deprecated
         * @description Retrieves the requested version backup configuration for a specific device.
         */
        get: operations["GetDeviceBackupVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/backup/{deviceId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device Backup History
         * @deprecated
         * @description Retrieves all backup versions for a specific device.
         */
        get: operations["GetAllDeviceBackups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [Admins Only] Get Devices
         * @description [Admins Only] Retrieves all registered devices.
         */
        get: operations["GetDevices"];
        put?: never;
        /**
         * Register Device
         * @description Registers a new device and returns the registration response.
         */
        post: operations["RegisterDevice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device
         * @description Retrieves info about specific registered device.
         */
        get: operations["GetDevice"];
        put?: never;
        post?: never;
        /**
         * Deregister Device
         * @description Deletes device from sunnylink.
         */
        delete: operations["DeregisterDevice"];
        options?: never;
        head?: never;
        /**
         * Update Device
         * @description Updates the device info and returns the updated device.
         */
        patch: operations["UpdateDevice"];
        trace?: never;
    };
    "/device/{deviceId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device Roles
         * @description Retrieves all the roles inherited by a specific registered device.
         */
        get: operations["GetDeviceRoles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users For Device
         * @description Retrieves all users for a given device.
         */
        get: operations["GetUsersForDevice"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Pair Device With User
         * @description Pairs a device with a given user. The pairing token used here is the same as the auth token for API requests made on openpilot with Api({device_id}).get_token(), but it can only be used as a one-time code.
         */
        post: operations["PairDeviceWithUser"];
        /**
         * Remove User From Device
         * @description Removes a user from a given device.
         */
        delete: operations["RemoveUserFromDevice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [Admins Only] Get Tokens
         * @description [Admins Only] Retrieves all registered tokens.
         */
        get: operations["GetTokens"];
        put?: never;
        /**
         * Register Token
         * @description Registers a new token and returns the registration response.
         */
        post: operations["RegisterToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/tokens/{tokenId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Token
         * @description Retrieves a specific token.
         */
        get: operations["GetToken"];
        put?: never;
        post?: never;
        /**
         * Delete Token
         * @description Deletes a specific token. (supports providing only last 5 characters of the token for security reasons)
         */
        delete: operations["DeleteToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/third_party/{service}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register Service
         * @description Starts the pairing process for a third-party service.
         */
        post: operations["RegisterService"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/third_party/{service}/access_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Access Token
         * @description Fetches the access token for a third-party service.
         */
        get: operations["GetAccessToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/third_party/{service}/check_status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check Status and Finish Registration
         * @description Checks the status and finishes the registration for a third-party service.
         */
        post: operations["CheckStatusAndFinishRegistration"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/upload_url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    path: string;
                };
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UploadUrlModel"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    state?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sso/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    code?: string;
                    provider?: string;
                    error?: string;
                    state?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/installer/{branch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets an installer for sunnypilot
         * @description Gets an installer for sunnypilot
         */
        get: operations["GetInstaller"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/navigation/{deviceId}/update_mapbox_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMapboxTokenRequestModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/navigation/{deviceId}/set_destination": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetNavigationDestinationRequestModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/navigation/{deviceId}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SavedLocationResponseModel"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/route/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all routes for a device
         * @description This endpoint retrieves all routes available on a specific device. The device must be online for this operation.
         */
        get: operations["ListRoutes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/device/{deviceId}/route/{routeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload a route from a device
         * @description This endpoint uploads a specific route from a specific device. The device must be online to initiate the upload.
         */
        post: operations["UploadRoute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the available settings on the device.
         * @description That means all the params available to save and request, but no data is returned with this.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AvailableSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Pushes settings to the device.
         * @description Settings are pushed real-time through a secure websocket connection.<br /><b>For sponsors</b>: If device is offline, messages are placed on an internal queue until the device is connected to push the messages.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ParamRequestModel"][];
                };
            };
            responses: {
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/{deviceId}/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the current settings on the device.
         * @description These settings are not stored on server, they are just obtained real-time from the device through a secure websocket connection.
         */
        get: {
            parameters: {
                query: {
                    paramKeys: string[];
                };
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/{deviceId}/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets a specific settings from the device. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Retrieves all users if an admin makes the request, otherwise just the current user.
         */
        get: operations["GetUsers"];
        put?: never;
        /**
         * Creates a new User on the system, if the caller is not an admin it will create a user for the caller.
         * @description Creates a new user.
         */
        post: operations["CreateUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/sponsors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sponsors
         * @description Retrieves all sponsors, only for admins.
         */
        get: operations["GetSponsors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * [Admins Only] Add Role
         * @description [Admins Only] Adds a role to a user.
         */
        post: operations["AddRole"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Devices For User
         * @description Retrieves all devices for a given user.
         */
        get: operations["GetDevicesForUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/update_mapbox_token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateMapboxTokenRequestModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/set_destination": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SetNavigationDestinationRequestModel"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SavedLocationResponseModel"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/resume_queued": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the available settings on the device.
         * @description That means all the params available to save and request, but no data is returned with this.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AvailableSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Pushes settings to the device.
         * @description Settings are pushed real-time through a secure websocket connection.<br /><b>For sponsors</b>: If device is offline, messages are placed on an internal queue until the device is connected to push the messages.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ParamRequestModel"][];
                };
            };
            responses: {
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/settings/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the current settings on the device.
         * @description These settings are not stored on server, they are just obtained real-time from the device through a secure websocket connection.
         */
        get: {
            parameters: {
                query: {
                    paramKeys: string[];
                };
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws/{deviceId}/settings/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets a specific settings from the device. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CurrentSettingsResponseModel"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiTokenModel: {
            token?: string | null;
            device_id?: string | null;
            /** Format: date-time */
            expiration_date?: string;
            readonly is_expired?: boolean;
            readonly is_active?: boolean;
            is_deactivated?: boolean;
        };
        AvailableSettingsResponseModel: {
            keys?: string[] | null;
        };
        BackupMetadataModel: {
            key: string | null;
            value: string | null;
            tags?: string[] | null;
        };
        BackupRequestModel: {
            is_encrypted?: boolean;
            config: string | null;
            sunnypilot_version: components["schemas"]["SunnypilotVersion"];
            backup_metadata?: components["schemas"]["BackupMetadataModel"][] | null;
        };
        BackupResponseModel: {
            device_id: string | null;
            /** Format: int32 */
            version?: number;
            is_encrypted?: boolean;
            config: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            sunnypilot_version: components["schemas"]["SunnypilotVersion"];
            backup_metadata?: components["schemas"]["BackupMetadataModel"][] | null;
        };
        CurrentSettingsResponseModel: {
            settings?: {
                [key: string]: string;
            } | null;
        };
        DeviceAuthPatchRequestModel: {
            alias?: string | null;
        };
        DeviceAuthRegistrationResponseModel: {
            readonly dongle_id?: string | null;
            device_id?: string | null;
        };
        DeviceAuthResponseModel: {
            device_id: string | null;
            /** Format: int32 */
            version?: number;
            comma_dongle_id?: string | null;
            alias?: string | null;
            public_key: string | null;
            /** Format: int64 */
            created_at?: number;
            /** Format: int64 */
            updated_at?: number;
        };
        DeviceUserResponseModel: {
            device_id?: string | null;
            user_id?: string | null;
            /** Format: int64 */
            created_at?: number;
            /** Format: int64 */
            updated_at?: number;
            /** Format: byte */
            token_hash?: string | null;
        };
        GoogleTokenModel: {
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            /** Format: int32 */
            version?: number;
            /** Format: int32 */
            last_version?: number | null;
            access_token?: string | null;
            /** Format: int32 */
            expires_in?: number;
            /** Format: date-time */
            readonly valid_until?: string;
            scope?: string | null;
            token_type?: string | null;
            refresh_token?: string | null;
            device_id?: string | null;
        };
        NoContent: {
            /** Format: int32 */
            readonly status_code?: number;
        };
        ParamRequestModel: {
            key?: string | null;
            value?: string | null;
            is_compressed?: boolean;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        RoleRequestModel: {
            /** @enum {string} */
            role_type?: "ReadOnly" | "Sponsor" | "Admin";
        };
        RoleResponseModel: {
            /** @enum {string} */
            role_type?: "ReadOnly" | "Sponsor" | "Admin";
        };
        RoleResponseModel2: {
            /** @enum {string} */
            role_type?: "ReadOnly" | "Sponsor" | "Admin";
            role_tier?: string | null;
        };
        RouteFile: {
            name?: string | null;
            path?: string | null;
        };
        RouteModel: {
            route_id?: string | null;
            segments?: components["schemas"]["Segment"][] | null;
        };
        SavedLocationResponseModel: {
            /** Format: int32 */
            id?: number;
            dongle_id: string | null;
            place_name?: string | null;
            place_details?: string | null;
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
            /** @enum {string} */
            save_type?: "Recent" | "Favorite";
            label?: string | null;
            /** Format: date-time */
            modified?: string;
        };
        Segment: {
            /** Format: int32 */
            id?: number;
            files?: components["schemas"]["RouteFile"][] | null;
        };
        SetNavigationDestinationRequestModel: {
            /** Format: double */
            latitude?: number;
            /** Format: double */
            longitude?: number;
            place_name?: string | null;
            place_details?: string | null;
        };
        SunnypilotVersion: {
            /** Format: int32 */
            major?: number;
            /** Format: int32 */
            minor?: number;
            /** Format: int32 */
            patch?: number;
            /** Format: int32 */
            build?: number;
            branch?: string | null;
        };
        UpdateMapboxTokenRequestModel: {
            public_token?: string | null;
            app_token?: string | null;
        };
        UploadFileToUrlResponse: {
            /** Format: int32 */
            enqueued?: number;
            items?: components["schemas"]["UploadItem"][] | null;
            failed?: string[] | null;
        };
        UploadItem: {
            path?: string | null;
            url?: string | null;
            headers?: {
                [key: string]: string;
            } | null;
            /** Format: int32 */
            created_at?: number;
            id?: string | null;
            /** Format: int32 */
            retry_count?: number;
            current?: boolean;
            /** Format: float */
            progress?: number;
            allow_cellular?: boolean;
        };
        UploadUrlModel: {
            file_name?: string | null;
            url?: string | null;
            headers?: {
                [key: string]: string;
            } | null;
        };
        UserRequestModel: {
            user_id?: string | null;
        };
        UserResponseModel: {
            user_id?: string | null;
            roles?: components["schemas"]["RoleResponseModel"][] | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetDeviceBackup: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupResponseModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    UpdateDeviceBackup: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BackupRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupResponseModel"];
                };
            };
        };
    };
    DeleteDeviceBackup: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetDeviceBackupVersion: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                deviceId: string;
                version: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupResponseModel"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/problem+json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    GetAllDeviceBackups: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BackupResponseModel"][];
                };
            };
        };
    };
    GetDevices: {
        parameters: {
            query?: {
                deviceId?: string;
                commaDongleId?: string;
                serial?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAuthResponseModel"][];
                };
            };
        };
    };
    RegisterDevice: {
        parameters: {
            query: {
                imei: string;
                imei2?: string;
                serial: string;
                comma_dongle_id?: string;
                public_key: string;
                register_token: string;
                alias?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAuthRegistrationResponseModel"];
                };
            };
        };
    };
    GetDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAuthResponseModel"];
                };
            };
        };
    };
    DeregisterDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAuthRegistrationResponseModel"];
                };
            };
        };
    };
    UpdateDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeviceAuthPatchRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceAuthResponseModel"];
                };
            };
        };
    };
    GetDeviceRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleResponseModel2"][];
                };
            };
        };
    };
    GetUsersForDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceUserResponseModel"][];
                };
            };
        };
    };
    PairDeviceWithUser: {
        parameters: {
            query: {
                pairingToken: string;
            };
            header?: never;
            path: {
                deviceId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceUserResponseModel"];
                };
            };
        };
    };
    RemoveUserFromDevice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoContent"];
                };
            };
        };
    };
    GetTokens: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiTokenModel"][];
                };
            };
        };
    };
    RegisterToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiTokenModel"];
                };
            };
        };
    };
    GetToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tokenId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiTokenModel"];
                };
            };
        };
    };
    DeleteToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                tokenId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoContent"];
                };
            };
        };
    };
    RegisterService: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                service: "YouTube" | "GoogleDrive";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiTokenModel"];
                };
            };
        };
    };
    GetAccessToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                service: "YouTube" | "GoogleDrive";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    CheckStatusAndFinishRegistration: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                service: "YouTube" | "GoogleDrive";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleTokenModel"];
                };
            };
        };
    };
    GetInstaller: {
        parameters: {
            query?: {
                /** @description The requested API version */
                "api-version"?: string;
            };
            header?: never;
            path: {
                branch: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": string;
                };
            };
        };
    };
    ListRoutes: {
        parameters: {
            query?: {
                routeId?: string;
            };
            header?: never;
            path: {
                deviceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RouteModel"][];
                };
            };
        };
    };
    UploadRoute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                deviceId: string;
                routeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileToUrlResponse"];
                };
            };
        };
    };
    GetUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseModel"][];
                };
            };
        };
    };
    CreateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseModel"];
                };
            };
        };
    };
    GetSponsors: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AddRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoleRequestModel"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponseModel"];
                };
            };
        };
    };
    GetDevicesForUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeviceUserResponseModel"][];
                };
            };
        };
    };
}
