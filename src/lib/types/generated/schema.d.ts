/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users
         * @description Retrieves all users if an admin makes the request, otherwise just the current user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserResponseModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/sponsors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sponsors
         * @description Retrieves all sponsors, only for admins.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SponsorshipEventModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users/{userId}/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Devices For User
         * @description Retrieves all devices for a given user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeviceUserResponseModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/settings/{deviceId}/values": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets all the current settings on the device.
         * @description These settings are not stored on server, they are just obtained real-time from the device through a secure websocket connection.
         */
        get: {
            parameters: {
                query: {
                    paramKeys: string[];
                };
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeviceParamCollectionResponseView"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/settings/{deviceId}/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Gets a specific settings from the device. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeviceParamCollectionResponseView"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backups/{deviceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Latest Device Backup
         * @description Retrieves the latest backup configuration for a specific device.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackupResponseModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backups/{deviceId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device Backup History
         * @description Retrieves a list of available backup versions for a specific device.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackupResponseModelV1CollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/backups/{deviceId}/{backupVersion}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Specific Version Device Backup
         * @description Retrieves the requested version backup configuration for a specific device.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                    backupVersion: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BackupResponseModel"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/problem+json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/devices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [Admins Only] Get Devices
         * @description [Admins Only] Retrieves all registered devices.
         */
        get: {
            parameters: {
                query?: {
                    deviceId?: string;
                    commaDongleId?: string;
                    serial?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeviceAuthResponseModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/devices/{deviceId}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device Roles
         * @description Retrieves all the roles inherited by a specific registered device.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RoleResponseModel2CollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/devices/{deviceId}/routes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all routes for a device
         * @description This endpoint retrieves all routes available on a specific device. The device must be online for this operation.
         */
        get: {
            parameters: {
                query?: {
                    routeId?: string;
                };
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RouteModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/devices/{deviceId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Users For Device
         * @description Retrieves all users for a given device.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DeviceUserResponseModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/devices/{deviceId}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * [Admins Only] Get Tokens
         * @description [Admins Only] Retrieves all registered tokens.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    deviceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiTokenModelCollectionResponseView"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    state?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sso/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    code?: string;
                    provider?: string;
                    error?: string;
                    state?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/installer/fork/{user}/{branch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a user-specific forked installer
         * @description Gets a user-specific forked installer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user: string;
                    branch: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/installer/{branch}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets an installer for sunnypilot
         * @description Gets an installer for sunnypilot
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    branch: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiTokenModel: {
            token?: string | null;
            device_id?: string | null;
            /** Format: date-time */
            expiration_date?: string;
            readonly is_expired?: boolean;
            readonly is_active?: boolean;
            is_deactivated?: boolean;
        };
        ApiTokenModelCollectionResponseView: {
            items?: components["schemas"]["ApiTokenModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        BackupMetadataModel: {
            key: string | null;
            value: string | null;
            tags?: string[] | null;
        };
        BackupResponseModel: {
            device_id: string | null;
            /** Format: int32 */
            version?: number;
            is_encrypted?: boolean;
            config: string | null;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            sunnypilot_version: components["schemas"]["SunnypilotVersion"];
            backup_metadata?: components["schemas"]["BackupMetadataModel"][] | null;
        };
        BackupResponseModelV1: {
            device_id: string | null;
            /** Format: int32 */
            version?: number;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string;
            sunnypilot_version: components["schemas"]["SunnypilotVersion"];
            backup_metadata?: components["schemas"]["BackupMetadataModel"][] | null;
        };
        BackupResponseModelV1CollectionResponseView: {
            items?: components["schemas"]["BackupResponseModelV1"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        DeviceAuthResponseModel: {
            device_id: string | null;
            /** Format: int32 */
            version?: number;
            comma_dongle_id?: string | null;
            alias?: string | null;
            public_key: string | null;
            /** Format: int64 */
            created_at?: number;
            /** Format: int64 */
            updated_at?: number;
        };
        DeviceAuthResponseModelCollectionResponseView: {
            items?: components["schemas"]["DeviceAuthResponseModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        DeviceParam: {
            key?: string | null;
            is_compressed?: boolean;
            value?: string | null;
            /** @enum {string} */
            type?: "String" | "Bool" | "Int" | "Float" | "Time" | "Json" | "Bytes" | "Unknown";
        };
        DeviceParamCollectionResponseView: {
            items?: components["schemas"]["DeviceParam"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        DeviceUserResponseModel: {
            device_id?: string | null;
            user_id?: string | null;
            /** Format: int64 */
            created_at?: number;
            /** Format: int64 */
            updated_at?: number;
            /** Format: byte */
            token_hash?: string | null;
        };
        DeviceUserResponseModelCollectionResponseView: {
            items?: components["schemas"]["DeviceUserResponseModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        RoleResponseModel: {
            /** @enum {string} */
            role_type?: "ReadOnly" | "Sponsor" | "Admin";
        };
        RoleResponseModel2: {
            /** @enum {string} */
            role_type?: "ReadOnly" | "Sponsor" | "Admin";
            role_tier?: string | null;
        };
        RoleResponseModel2CollectionResponseView: {
            items?: components["schemas"]["RoleResponseModel2"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        RouteFile: {
            name?: string | null;
            path?: string | null;
        };
        RouteModel: {
            route_id?: string | null;
            segments?: components["schemas"]["Segment"][] | null;
        };
        RouteModelCollectionResponseView: {
            items?: components["schemas"]["RouteModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        Segment: {
            /** Format: int32 */
            id?: number;
            files?: components["schemas"]["RouteFile"][] | null;
        };
        SponsorshipEventModel: {
            user_id?: string | null;
            user_name?: string | null;
            /** @enum {string} */
            source?: "Unknown" | "GitHub" | "Patreon" | "Manual";
            /** Format: date-time */
            valid_until?: string | null;
            /** @enum {string} */
            sponsor_last_event?: "invalid" | "active" | "inactive" | "pending_cancellation";
            source_last_event_name?: string | null;
            readonly is_active?: boolean;
            /** Format: double */
            monthly_price_in_dollars?: number;
            is_one_time?: boolean;
        };
        SponsorshipEventModelCollectionResponseView: {
            items?: components["schemas"]["SponsorshipEventModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
        SunnypilotVersion: {
            /** Format: int32 */
            major?: number;
            /** Format: int32 */
            minor?: number;
            /** Format: int32 */
            patch?: number;
            /** Format: int32 */
            build?: number;
            branch?: string | null;
        };
        UserResponseModel: {
            user_id?: string | null;
            roles?: components["schemas"]["RoleResponseModel"][] | null;
        };
        UserResponseModelCollectionResponseView: {
            items?: components["schemas"]["UserResponseModel"][] | null;
            /** Format: int32 */
            readonly count?: number;
            /** Format: int32 */
            total?: number | null;
            /** Format: int32 */
            offset?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
